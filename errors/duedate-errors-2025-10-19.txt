DUE DATE LOG ERROR REPORT
Generated: 2025-10-19T13:00:11.913Z
Date: 2025-10-19
Source File: dueDateLogs-2025-10-19.txt
Status: NO ERRORS FOUND
Detected by: Gemini AI

==============================================
ANALYSIS RESULT:
==============================================

```python
import re

def analyze_netsuite_log(log_content):
    """
    Analyzes NetSuite log content to find SCRIPT ERRORs and extract their details.

    Args:
        log_content (str): The full content of the NetSuite log.

    Returns:
        str: Formatted error details or "NO ERRORS DETECTED".
    """
    errors = []
    lines = log_content.strip().split('\n')
    i = 0

    while i < len(lines):
        line = lines[i]
        
        # Rule 1: ONLY look for lines containing the exact text "SCRIPT ERROR:"
        if "SCRIPT ERROR:" in line:
            error_data = {
                "timestamp": "N/A",
                "Bill Payment ID": "N/A",
                "Invoice ID": "N/A",
                "Bill ID": "N/A",
                "Amount": "N/A",
                "UTR Date": "N/A",
                "Error Name": "N/A",
                "Error Message": "N/A"
            }

            # Extract timestamp from the SCRIPT ERROR line
            timestamp_match = re.match(r'\[(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3})\]', line)
            if timestamp_match:
                error_data["timestamp"] = timestamp_match.group(1)

            # Read subsequent lines for error details
            j = i + 1
            parameters_line_found = False
            while j < len(lines):
                sub_line = lines[j].strip()

                # Check if it's a new log entry (starts with timestamp) or end of log
                if re.match(r'\[\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}\]', sub_line) or not sub_line:
                    break # End of current error block

                if sub_line.startswith("Bill Payment ID:"):
                    error_data["Bill Payment ID"] = sub_line.split(":", 1)[1].strip()
                elif sub_line.startswith("Error Name:"):
                    error_data["Error Name"] = sub_line.split(":", 1)[1].strip()
                elif sub_line.startswith("Error Message:"):
                    error_data["Error Message"] = sub_line.split(":", 1)[1].strip()
                elif sub_line.startswith("Parameters Used:"):
                    parameters_line_found = True
                    params_str = sub_line.split(":", 1)[1].strip()
                    
                    # Extract Amount and UTR Date from this line
                    bill_pay_amount_match = re.search(r'billPaymentAmount:\s*(\d+)', params_str)
                    if bill_pay_amount_match:
                        error_data["Amount"] = bill_pay_amount_match.group(1)
                    
                    utr_date_match = re.search(r'utrGeneratedDate:\s*([\d/]+)', params_str)
                    if utr_date_match:
                        error_data["UTR Date"] = utr_date_match.group(1)
                    
                    # Also check for billId and invoiceId on this line, though they might be on the next
                    bill_id_match = re.search(r'billId:\s*(\d+)', params_str)
                    if bill_id_match:
                        error_data["Bill ID"] = bill_id_match.group(1)
                    
                    invoice_id_match = re.search(r'invoiceId:\s*(\d+)', params_str)
                    if invoice_id_match:
                        error_data["Invoice ID"] = invoice_id_match.group(1)
                elif parameters_line_found and not sub_line.startswith("Stack:"): 
                    # This handles the case where billId/invoiceId are on the line immediately following "Parameters Used:"
                    if error_data["Bill ID"] == "N/A":
                        bill_id_match = re.search(r'billId:\s*(\d+)', sub_line)
                        if bill_id_match:
                            error_data["Bill ID"] = bill_id_match.group(1)
                    if error_data["Invoice ID"] == "N/A":
                        invoice_id_match = re.search(r'invoiceId:\s*(\d+)', sub_line)
                        if invoice_id_match:
                            error_data["Invoice ID"] = invoice_id_match.group(1)
                elif sub_line.startswith("Stack:"):
                    break # End of structured error details for this error

                j += 1
            errors.append(error_data)
            i = j # Move the main pointer past the processed error block
        else:
            i += 1

    if

[WARNING: Analysis may be incomplete - response was truncated due to length]

The Due Date system appears to be running normally.

==============================================
END OF REPORT
==============================================