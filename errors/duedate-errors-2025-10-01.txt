DUE DATE LOG ERROR REPORT
Generated: 2025-10-01T13:08:15.282Z
Date: 2025-10-01
Source File: dueDateLogs-2025-10-01.txt
Status: NO ERRORS FOUND
Detected by: Gemini AI

==============================================
ANALYSIS RESULT:
==============================================

```python
import re

log_content = """
[2025-09-30 03:42:48.708] 
============================================================
[2025-09-30 03:42:48.710] DUE DATE UPDATE SCRIPT EXECUTION
[2025-09-30 03:42:48.712] Timestamp: 2025-09-30 03:42:48 UTC
[2025-09-30 03:42:48.713] ============================================================

[2025-09-30 03:42:48.715] Bill Payment ID: 5324860
[2025-09-30 03:42:48.716] Script triggered by: view
[2025-09-30 03:42:48.717] User: System

[2025-09-30 03:42:48.866] Bill payment record loaded successfully. Type: vendorpayment, ID: 5324860
[2025-09-30 03:42:48.870] Bill payment amount retrieved: 200
[2025-09-30 03:42:48.894] Payment details - Items Count: 1, Payment Status: Confirmed, Payment Method: 7, UTR Date: 10/8/2025
[2025-09-30 03:42:48.896] CONDITION MET: UTR date exists and payment method is 7 (Sambitron) - Entering UTR Flow
[2025-09-30 03:42:48.899] 
--- Processing Apply Item 1 of 1 ---
[2025-09-30 03:42:48.905] Processing item 0: Apply=true, Transaction Type=VendBill
[2025-09-30 03:42:48.906] Bill ID retrieved: 5296114 for iteration 0
[2025-09-30 03:42:48.950] Bill form check: 219 (should not be 338)
[2025-09-30 03:42:53.451] Invoice ID retrieved: 5296021 from bill 5296114
[2025-09-30 03:42:54.609] Installment Number: 2, Sales Order ID: 5296009
[2025-09-30 03:42:54.614] Payment confirmed - proceeding with due date updates for Bill: 5296114, Invoice: 5296021
[2025-09-30 03:42:55.782] Bill 5296114 updated with supplier payment date: 10/8/2025
[2025-09-30 03:42:56.282] Transaction origin: Supplier Originated, Repayment select: 2
[2025-09-30 03:42:56.288] OVERRIDE: Using supplier payment days (10) instead of installment days (10)
[2025-09-30 03:42:56.291] Processing installment 0: Milestone="On Supplier Payment", Days to add=10
[2025-09-30 03:42:56.293] 
=== SIMPLE UTR DATE CHECK ===
[2025-09-30 03:42:56.295] Invoice: 5296021
[2025-09-30 03:42:56.297] Current UTR: 10/8/2025
[2025-09-30 03:42:56.303] AP Bill ID: 5296114
[2025-09-30 03:42:56.305] Searching for all payments to debug status values...
[2025-09-30 03:42:56.318] Found 1 payments total (before status filtering)
[2025-09-30 03:42:56.320] Payment 5324860: Status Text='Confirmed', Status Value='confirmed'
[2025-09-30 03:42:56.322] ??? Payment 5324860 is confirmed
[2025-09-30 03:42:56.324] After manual status filtering: 1 confirmed payments
[2025-09-30 03:42:56.326] Payment 5324860 (Confirmed): UTR 10/8/2025
[2025-09-30 03:42:56.328] 
[2025-09-30 03:42:56.330] 
Earliest UTR Date: 10/8/2025 (Changed: NO)
[2025-09-30 03:42:56.333] === END UTR DATE CHECK ===

[2025-09-30 03:42:56.340] Original calculated due date stored (UTR): 20/8/2025
[2025-09-30 03:42:56.358] Holiday check for date 20/8/2025: Not Holiday
[2025-09-30 03:42:56.363] Due date calculated: Original=20/8/2025, Adjusted=20/8/2025
[2025-09-30 03:42:56.369] 
*** SUPPLIER ORIGINATED FLOW ***
[2025-09-30 03:42:56.373] Supplier originated flow - Grace period: 0 days
[2025-09-30 03:42:56.374] BEFORE calling getEarliestUtrDate:
[2025-09-30 03:42:56.376] - Invoice ID: 5296021
[2025-09-30 03:42:56.378] - Current Bill Payment ID: 5324860
[2025-09-30 03:42:56.379] - Current UTR Date: 10/8/2025
[2025-09-30 03:42:56.381] 
=== SIMPLE UTR DATE CHECK ===
[2025-09-30 03:42:56.382] Invoice: 5296021
[2025-09-30 03:42:56.384] Current UTR: 10/8/2025
[2025-09-30 03:42:56.390] AP Bill ID: 5296114
[2025-09-30 03:42:56.392] Searching for all payments to debug status values...
[2025-09-30 03:42:56.400] Found 1 payments total (before status filtering)
[2025-09-30 03:42:56.402] Payment 5324860: Status Text='Confirmed', Status Value='confirmed'
[2025-09-30 03:42:56.404] ??? Payment 5324860 is confirmed
[2025-09-30 03:42:56.405] After manual status filtering: 1 confirmed payments
[2025-09-30 03:42:56.407] Payment 5324860 (Confirmed): UTR 10/8/2025
[2025-09-30 03:42:56.409] 
[2025-09-30 03:42:56.410] 
Earliest UTR Date: 10/8/2025 (Changed: NO)
[2025-09-30 03:42:56.412] === END UTR DATE CHECK ===

[2025-09-30 03:42:56.413] AFTER calling getEarliestUtrDate:
[2025-09-30 03:42:56.415] - Returned Date: 10/8/2025
[2025-09-30 03:42:56.416] - Is Same as Input: YES
[2025-09-30 03:42:56.418] BEFORE calling getEarliestUtrDate:
[2025-09-30 03:42:56.420] - Invoice ID: 5296021
[2025-09-30 03:42:56.421] - Current Bill Payment ID: 5324860
[2025-09-30 03:42:56.423] - Current UTR Date: 10/8/2025
[2025-09-30 03:42:56.425] AFTER calling getEarliestUtrDate:
[2025-09-30 03:42:56.427] - Returned Date: 10/8/2025
[2025-09-30 03:42:56.428] - Is Same as Input: YES
[2025-09-30 03:42:56.437] Due date criteria set to: 1
[2025-09-30 03:42:57.932] SCRIPT ERROR:
Bill Payment ID: 5324860
Error Name: CANNOT_CHANGE_INVOICE_PAID_INSTALLMENTS
Error Message: After a payment is applied to an installment, you cannot change the Due Date field nor the Amount field.
Parameters Used: billPayId: 5324860, billPaymentAmount: 200, utrGeneratedDate: 10/8/2025
iterationNo: 0, billId: 5296114, invoiceId: 5296021
Stack: Error
    at RecordInvoker.save (suitescript/resources/javascript/record/serverRecordService.js:371:13)
    at NetSuiteObject.thenableFunction() (suitescript/resources/javascript/record/proxy.js:115:24)
    at Object.updateDueDate (/SuiteScripts/updateDueDateSS-V2.js:1155:55)

[2025-09-30 03:43:06.591] 
"""

lines = log_content.strip().split('\n')
errors = []
error_count = 0

i = 0
while i < len(lines):
    line = lines[i]
    if "SCRIPT ERROR:" in line:
        error_count += 1
        error_data = {
            "timestamp": line.split(']')[0][1:], # Extract timestamp from the SCRIPT ERROR line
            "Bill Payment ID": "N/A",
            "Invoice ID": "N/A",
            "Bill ID": "N/A",
            "Amount": "N/A",
            "UTR Date": "N/A",
            "Error Name": "N/A",
            "Error Message": "N/A"
        }

        # Read subsequent lines for error details
        j = i + 1
        # Loop until we hit another timestamped log entry (starts with '[') or the end of the log
        while j < len(lines) and not lines[j].strip().startswith("["):
            sub_line = lines[j].strip()

            if sub_line.startswith("Bill Payment ID:"):
                error_data["Bill Payment ID"] = sub_line.split(":", 1)[1].strip()
            elif sub_line.startswith("Error Name:"):
                error_data["Error Name"] = sub_line.split(":", 1)[1].strip()
            elif sub_line.startswith("Error Message:"):
                error_data["Error Message"] = sub_line.split(":", 1)[1].strip()
            elif sub_line.startswith("Parameters Used:"):
                # Parameters Used can span multiple lines
                params_line_buffer = [sub_line]
                k = j + 1
                # Continue collecting lines as long as they don't start with '[' or 'Stack:'
                while k < len(lines) and not lines[k].strip().startswith("[") and not lines[k].strip().startswith("Stack:"):
                    params_line_buffer.append(lines[k].strip())
                    k += 1
                
                params_line = " ".join(params_line_buffer) # Join all parameter lines

                # Extract details from the combined parameters line using regex
                bill_payment_amount_match = re.search(r"billPaymentAmount:\s*(\d+)", params_line)
                if bill_payment_amount_match:
                    error_data["Amount"] = bill_payment_amount_match.group(1)

                utr_date_match = re.search(r"utrGeneratedDate:\s*([\d/]+)", params_line)
                if utr_date_match:
                    error_data["UTR Date"] = utr_date_match.group(1)

                bill_id_match = re.search(r"billId:\s*(\d+)", params_line)
                if bill_id_match:
                    error_data["Bill ID"] = bill_id_match.group(1)

                invoice_id_match = re.search(r"invoiceId:\s*(\d+)", params_line)
                if invoice_id_match:
                    error_data["Invoice ID"] = invoice_id_match.group(1)
                
                j = k - 1 # Adjust j to the last line of parameters or the line before Stack/next log entry
            
            # If we hit a Stack trace, we've collected all relevant error details for this block
            if sub_line.startswith("Stack:"):
                break
            
            j += 1
        errors.append(error_data)
        i = j # Move the main iterator past the current error block
    else:
        i += 1

if not errors:
    print("NO ERRORS DETECTED")
else:
    output = []
    for idx, error in enumerate(errors):
        output.append(f"Error {idx + 1}: {error['timestamp']}")
        output.append(f"   Type: Script Error")
        output.append(f"   Bill Payment ID: {error['Bill Payment ID']}")
        output.append(f"   Invoice ID: {error['Invoice ID']}")
        output.append(f"   Bill ID: {error['Bill ID']}")
        output.append(f"   Amount: {error['Amount']}")
        output.append(f"   UTR Date: {error['UTR Date']}")
        output.append(f"   Error Name: {error['Error Name']}")
        output.append(f"   Error Message: {error['Error Message']}")
    print("\n".join(output))
```

The Due Date system appears to be running normally.

==============================================
END OF REPORT
==============================================